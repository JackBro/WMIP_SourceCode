// Driver Definitions Shared with User Mode Clients
// ================================================
//
// (c), 2003 by Enrico Martignetti - All rights reserved.

//----------------------------------------------------------------------
//
// Defines
// -------


// Driver name used in messages
//
#define DRV_NAME		"KernelAllocs"

// Driver image file to load
//
#define DRV_IMAGE		L"krnlallocs.sys"

// Service name for the driver
//
#define DRV_SVC_NAME		L"krnlallocs"


// Name of the logical device managed by the driver
//#define DRV_DEVICE_NAME_ANSI    "SkelDrvDevice"
#define DRV_DEVICE_NAME			L"MemTestDevice"

#define IOCTL_MEMTEST_MDL_FOR_USER_BUFFER		CTL_CODE(FILE_DEVICE_UNKNOWN, \
	0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_MEMTEST_ALLOCATEMDL		CTL_CODE(FILE_DEVICE_UNKNOWN, \
	0x801, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_MEMTEST_FREEMDL		CTL_CODE(FILE_DEVICE_UNKNOWN, \
	0x802, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_MEMTEST_ALLOCMAPADDR		CTL_CODE(FILE_DEVICE_UNKNOWN, \
	0x803, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_MEMTEST_FREEMAPADDR		CTL_CODE(FILE_DEVICE_UNKNOWN, \
	0x804, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_MEMTEST_PROBEANDLOCK		CTL_CODE(FILE_DEVICE_UNKNOWN, \
	0x805, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_MEMTEST_UNLOCKPAGES		CTL_CODE(FILE_DEVICE_UNKNOWN, \
	0x806, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_MEMTEST_ALLOCPAGESMDL		CTL_CODE(FILE_DEVICE_UNKNOWN, \
	0x807, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_MEMTEST_FREEPAGESMDL		CTL_CODE(FILE_DEVICE_UNKNOWN, \
	0x808, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_MEMTEST_MAPLPAGESRESMAP		CTL_CODE(FILE_DEVICE_UNKNOWN, \
	0x809, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_MEMTEST_UNMAPRESMAP		CTL_CODE(FILE_DEVICE_UNKNOWN, \
	0x80a, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_MEMTEST_KMEMTOUCH		CTL_CODE(FILE_DEVICE_UNKNOWN, \
	0x80b, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_MEMTEST_CALLPAGEABLE		CTL_CODE(FILE_DEVICE_UNKNOWN, \
	0x80c, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_MEMTEST_LOCKPAGEABLE		CTL_CODE(FILE_DEVICE_UNKNOWN, \
	0x80d, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_MEMTEST_UNLOCKPAGEABLE		CTL_CODE(FILE_DEVICE_UNKNOWN, \
	0x80e, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_MEMTEST_MAPLOCKPAGES		CTL_CODE(FILE_DEVICE_UNKNOWN, \
	0x80f, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_MEMTEST_UNMAPLOCKPAG		CTL_CODE(FILE_DEVICE_UNKNOWN, \
	0x810, METHOD_BUFFERED, FILE_ANY_ACCESS)



//----------------------------------------------------------------------
//
// Data Types
// ----------

typedef enum {
	ATRead,
	ATWrite
} KADRV_ACCESS_TYPE;

typedef enum {
	AMKernel,
	AMUser
} KADRV_ACCESS_MODE;

typedef enum {
	CTNonCached,
	CTCached,
	CTWriteCombined
} KADRV_CACHE_TYPE;

typedef struct _KADRV_ALLOCMDL_INPUT {
	PVOID		VirtualAddress;
	ULONG		Length;
} KADRV_ALLOCMDL_INPUT, *PKADRV_ALLOCMDL_INPUT;

typedef struct _KADRV_ALLMAPADDR_INPUT {
	SIZE_T		Size;
	PVOID		Address;
} KADRV_ALLMAPADDR_INPUT, *PKADRV_ALLMAPADDR_INPUT;

typedef struct _KADRV_ALLPAGESFORMDL_INPUT {
	PVOID		LowAddress;
	PVOID		HighAddress;
	ULONGLONG	SkipBytes;
	SIZE_T		TotalBytes;
	ULONG		CacheType;
	ULONG		Flags;
} KADRV_ALLPAGESFORMDL_INPUT, *PKADRV_ALLPAGESFORMDL_INPUT;

typedef struct _KADRV_KMEMTOUCH_INPUT {
	PVOID				lpStart;
	SIZE_T				cbLength;
	KADRV_ACCESS_TYPE	AccessType;
} KADRV_KMEMTOUCH_INPUT, *PKADRV_KMEMTOUCH_INPUT ;

typedef struct _KADRV_MAPLOCKPAGES_INPUT{
	PVOID				pMdl;
	ULONG				AccessMode;
	ULONG				CacheType;
	PVOID				pBaseAddress;
} KADRV_MAPLOCKPAGES_INPUT, *PKADRV_MAPLOCKPAGES_INPUT;

typedef struct _KADRV_MAPLPAGESRESMAP_INPUT {
	PVOID				MappingAddress;
	PVOID				pMdl;
	KADRV_CACHE_TYPE	CacheType;
} KADRV_MAPLPAGESRESMAP_INPUT, *PKADRV_MAPLPAGESRESMAP_INPUT;

typedef struct _KADRV_MDLFORUSERBUFFER_INPUT  {
	PVOID				pBuffer;
	ULONG				BufSize;
	KADRV_ACCESS_TYPE	AccessType;
	KADRV_ACCESS_MODE	AccessMode;
	KADRV_CACHE_TYPE	CacheType;
} KADRV_MDLFORUSERBUFFER_INPUT, *PKADRV_MDLFORUSERBUFFER_INPUT;

typedef struct _KADRV_PROBEANDLOCK_INPUT {
	PVOID				pMdl;
	KADRV_ACCESS_MODE	AccessMode;
	KADRV_ACCESS_TYPE	Operation;
} KADRV_PROBEANDLOCK_INPUT, *PKADRV_PROBEANDLOCK_INPUT;


typedef struct _KADRV_UNMAPLOCKPAG_INPUT {
	PVOID				BaseAddress;
	PVOID				pMdl;
} KADRV_UNMAPLOCKPAG_INPUT, *PKADRV_UNMAPLOCKPAG_INPUT;

typedef struct _KADRV_UNMAPRESMAP_INPUT {
	PVOID				BaseAddress;
	PVOID				pMdl;
} KADRV_UNMAPRESMAP_INPUT, *PKADRV_UNMAPRESMAP_INPUT;

typedef struct _KADRV_ZWMAPVIEWOFSEC_INPUT {
	WCHAR			ProcName[256];
	PVOID			SectionHandle;
	PVOID			BaseAddress;
	ULONGLONG		ZeroBits;
	ULONGLONG		CommitSize;
	ULONGLONG		SectionOffset;
	ULONGLONG		ViewSize;
	ULONG			Win32Protect;
} KADRV_ZWMAPVIEWOFSEC_INPUT, *PKADRV_ZWMAPVIEWOFSEC_INPUT;

typedef struct _KADRV_ZWOPENSEC_INPUT {
	WCHAR				SecName[256];
	ULONG				AccessMask;
} KADRV_ZWOPENSEC_INPUT, *PKADRV_ZWOPENSEC_INPUT;
